AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Template that creates and configure an EC2 Instance with Apache Server

Parameters:
  prefix:
    Type: String
    Description: Prefix name for the resources
    Default: www-redirect-apex
  
  vpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC Id

  subnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet where the EC2 will be located

  albSGId:
    Type: String
    Description: Application Load Balancer Security Group ID
  
  albListenerArn:
    Type: String
    Description: Application Load Balancer Listener ARN
  
# Amazon Linux 2 AMI ID Mapping (https://aws.amazon.com/amazon-linux-2/release-notes/) 
Mappings:
  AWSRegionToAMI:
    eu-west-2:
      AMIID: ami-0d8e27447ec2c8410
    ca-central-1:
      AMIID: ami-0d4ae09ec9361d8ac
    us-west-2:
      AMIID: ami-082b5a644766e0e6f
    ap-east-1:
      AMIID: ami-570c7726
    us-east-2:
      AMIID: ami-0d8f6eb4f641ef691
    us-east-1:
      AMIID: ami-0b898040803850657
    us-west-1:
      AMIID: ami-056ee704806822732
    sa-east-1:
      AMIID: ami-058943e7d9b9cabfb 
    eu-west-3:
      AMIID: ami-0adcddd3324248c4c
    eu-central-1:
      AMIID: ami-0cc293023f983ed53
    eu-west-1:
      AMIID: ami-0bbc25e23a7640b9b
    ap-northeast-2:
      AMIID: ami-095ca789e0549777d
    ap-northeast-1:
      AMIID: ami-0c3fd0f5d33134a76
    ap-south-1:
      AMIID: ami-0d2692b6acea72ee6
    ap-southeast-2:
      AMIID: ami-0dc96254d5535925f
    ap-southeast-2:
      AMIID: ami-0dc96254d5535925f
    eu-north-1:
      AMIID: ami-3f36be41
    ap-northeast-3:
      AMIID: ami-0ee933a7f81beb045
    ap-southeast-1:
      AMIID: ami-01f7527546b557442
    cn-north-1:
      AMIID: ami-08b835182371dee58
    cn-northwest-1:
      AMIID: ami-0829e595217a759b9
    us-gov-west-1:
      AMIID: ami-e9a9d388
    us-gov-east-1:
      AMIID: ami-a2d938d3

Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${prefix}-ec2-sg'
      GroupDescription: EC2 Security Group to allow Access from the Load Balancer
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - Description: Allow Access from Load Balancer
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Ref albSGId
        # - Description: Allow Access from Everywhere
        #   IpProtocol: tcp
        #   FromPort: '80'
        #   ToPort: '80'
        #   CidrIp: 0.0.0.0/0

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${prefix}-ec2-role'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  
  EC2AccessProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref EC2Role

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      InstanceType: t2.micro
      IamInstanceProfile: !Ref EC2AccessProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          SubnetId: !Ref subnetId
          GroupSet: 
            - !Ref EC2SecurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: 8
            VolumeType: gp2
            DeleteOnTermination: true   
      Tags:
        - Key: 'Name'
          Value: !Sub '${prefix}-ec2-server'
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd.x86_64
            service httpd start
            chkconfig httpd on
            sudo bash -c 'echo "<html><body><h1>Server Running</h1></body></html>" >> /var/www/html/healthcheck.html'
  
  ALBEC2TG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/healthcheck.html'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: !Sub '${prefix}-alb-ec2-tg'
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref 'vpcId'
      Targets:
        - Id: !Ref EC2Instance
      Tags:
      - Key: Name
        Value: !Sub '${prefix}-alb-ec2-tg'
  
  ALBEC2ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ALBEC2TG
      Conditions:
        - Field: path-pattern
          Values: 
            - '/*'
      ListenerArn: !Ref albListenerArn
      Priority: 1